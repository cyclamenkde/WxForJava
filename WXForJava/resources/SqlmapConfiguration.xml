<?xml version="1.0" encoding="UTF-8"?>
<configuration> <!-- 引入外部数据库配置文件 -->
	<properties resource="database.properties" />
	<!-- 类型别名是为Java类型命名一个短的名字。它只和XML配置有关，只用来减少类完全限定名的多余部分。例如： 使用这个配置，“Student”可以任意用来替代“com.marcle.domain.Student”所使用的地方。 
		对于普通的Java类型，有许多内建的类型别名。它们都是大小写不敏感的，由于重载的名字，要注意原生类型的特殊处理。 -->
	<typeAliases>
		<typeAlias type="com.pango.mybatis.entity.Student" alias="Student" />
		<typeAlias type="com.pango.mybatis.entity.Status" alias="Status" />
	</typeAliases>
	<!-- environments 下用于配置不同数据库环境 -->
	<environments default="development">
		<environment id="development">
			<!-- 在MyBatis中有两种事务管理器类型（也就是type=”[JDBC|MANAGED]”）：  JDBC – 这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。 
				MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如Spring或JEE应用服务器的上下文）。 
				默认情况下它会关闭连接。然而一些容器并不希望这样，因此如果你需要从连接中停止它，将closeConnection属性设置为false -->
			<transactionManager type="JDBC" />
			<!-- 数据源的配置 dataSource元素使用基本的JDBC数据源接口来配置JDBC连接对象的资源。  许多MyBatis的应用程序将会按示例中的例子来配置数据源。然而它并不是必须的。要知道为了方便使用延迟加载，数据源才是必须的 
				有三种内建的数据源类型 UNPOOLED – 这个数据源的实现是每次被请求时简单打开和关闭连接。它有一点慢，这是对简单应用程序的一个很好的选择，因为它不需要及时的可用连接。 
				不同的数据库对这个的表现也是不一样的，所以对某些数据库来说配置数据源并不重要，这个配置也是闲置的 POOLED – 这是JDB法C连接对象的数据源连接池的实现，用来避免创建新的连接实例时必要的初始连接和认证时间。这是一种当前Web应用程序用来快速响应请求很流行的方 
				JNDI – 这个数据源的实现是为了使用如Spring或应用服务器这类的容器，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用 -->
			<dataSource type="POOLED">
				<property name="driver" value="${database.driver}" />
				<property name="url" value="${database.url}" />
				<property name="username" value="${database.user}" />
				<property name="password" value="${database.password}" />
			</dataSource>
		</environment>
	</environments>
	<mappers>
		<!--指定要用到的mapper文件。以下的resource属性告诉 MyBatis要在类路径下的resources目录下找student.xml文件。我们将把mapper文件存放在src目录下的resources目录中。 -->
		<mapper resource="case/student.xml" />
	</mappers>
</configuration> 